{"expireTime":9007200833969727000,"key":"gatsby-plugin-mdx-entire-payload-71a3dbf045c95621bdcc764beb2e1b85-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This can inspect the class or other fields to generate this.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":61,"offset":60},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":61,"offset":60},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"static getImplicitPkField() {\n    // Generate a name based on model class name\n    // eg. `User` => `userId`, `AdminUser` => `adminUserId`\n    const name = this.name[0].toLowerCase() + this.name.slice(1);\n    return [`${name}Id`, new NumberField()];\n}","position":{"start":{"line":3,"column":1,"offset":62},"end":{"line":10,"column":4,"offset":323},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also return an existing field to use that:","position":{"start":{"line":12,"column":1,"offset":325},"end":{"line":12,"column":51,"offset":375},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":325},"end":{"line":12,"column":51,"offset":375},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"static getImplicitPkField() {\n    // If a ViewModel has an EntityId field use that, otherwise fallback to default\n    if ('EntityId' in this.unboundFields) {\n        return ['EntityId', this.unboundFields.EntityId];\n    }\n    return ['id', new NumberField()];\n}","position":{"start":{"line":14,"column":1,"offset":377},"end":{"line":22,"column":4,"offset":648},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Compound keys are also supported:","position":{"start":{"line":24,"column":1,"offset":650},"end":{"line":24,"column":34,"offset":683},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":650},"end":{"line":24,"column":34,"offset":683},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"static getImplicitPkField() {\n     return [\n         ['model', 'uuid'],\n         [new CharField(), new NumberField()],\n     ];\n}","position":{"start":{"line":26,"column":1,"offset":685},"end":{"line":33,"column":4,"offset":823},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":36,"column":1,"offset":826},"end":{"line":36,"column":31,"offset":856},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":31,"offset":856}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This can inspect the class or other fields to generate this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"static getImplicitPkField() {\\n    // Generate a name based on model class name\\n    // eg. `User` => `userId`, `AdminUser` => `adminUserId`\\n    const name = this.name[0].toLowerCase() + this.name.slice(1);\\n    return [`${name}Id`, new NumberField()];\\n}\\n\")), mdx(\"p\", null, \"You can also return an existing field to use that:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"static getImplicitPkField() {\\n    // If a ViewModel has an EntityId field use that, otherwise fallback to default\\n    if ('EntityId' in this.unboundFields) {\\n        return ['EntityId', this.unboundFields.EntityId];\\n    }\\n    return ['id', new NumberField()];\\n}\\n\")), mdx(\"p\", null, \"Compound keys are also supported:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"static getImplicitPkField() {\\n     return [\\n         ['model', 'uuid'],\\n         [new CharField(), new NumberField()],\\n     ];\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This can inspect the class or other fields to generate this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`static getImplicitPkField() {\n    // Generate a name based on model class name\n    // eg. \\`User\\` => \\`userId\\`, \\`AdminUser\\` => \\`adminUserId\\`\n    const name = this.name[0].toLowerCase() + this.name.slice(1);\n    return [\\`\\${name}Id\\`, new NumberField()];\n}\n`}</code></pre>\n    <p>{`You can also return an existing field to use that:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`static getImplicitPkField() {\n    // If a ViewModel has an EntityId field use that, otherwise fallback to default\n    if ('EntityId' in this.unboundFields) {\n        return ['EntityId', this.unboundFields.EntityId];\n    }\n    return ['id', new NumberField()];\n}\n`}</code></pre>\n    <p>{`Compound keys are also supported:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`static getImplicitPkField() {\n     return [\n         ['model', 'uuid'],\n         [new CharField(), new NumberField()],\n     ];\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}