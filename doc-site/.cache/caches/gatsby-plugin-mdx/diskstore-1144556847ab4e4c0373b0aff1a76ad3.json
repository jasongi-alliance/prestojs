{"expireTime":9007200833969725000,"key":"gatsby-plugin-mdx-entire-payload-bff7004b4f9dae090268be484ca5854a-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This can be called directly or indirectly via ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":47,"offset":46},"indent":[]}},{"type":"inlineCode","value":"prepare","position":{"start":{"line":1,"column":47,"offset":46},"end":{"line":1,"column":56,"offset":55},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":57,"offset":56},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":57,"offset":56},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the fetch call itself fails (eg. a network error) a ","position":{"start":{"line":3,"column":1,"offset":58},"end":{"line":3,"column":56,"offset":113},"indent":[]}},{"type":"inlineCode","value":"RequestError","position":{"start":{"line":3,"column":56,"offset":113},"end":{"line":3,"column":70,"offset":127},"indent":[]}},{"type":"text","value":" will be thrown.","position":{"start":{"line":3,"column":70,"offset":127},"end":{"line":3,"column":86,"offset":143},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":58},"end":{"line":3,"column":86,"offset":143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the response is a non-2XX response an ","position":{"start":{"line":5,"column":1,"offset":145},"end":{"line":5,"column":42,"offset":186},"indent":[]}},{"type":"inlineCode","value":"ApiError","position":{"start":{"line":5,"column":42,"offset":186},"end":{"line":5,"column":52,"offset":196},"indent":[]}},{"type":"text","value":" will be thrown.","position":{"start":{"line":5,"column":52,"offset":196},"end":{"line":5,"column":68,"offset":212},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":145},"end":{"line":5,"column":68,"offset":212},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the call is successful the body will be decoded using ","position":{"start":{"line":7,"column":1,"offset":214},"end":{"line":7,"column":58,"offset":271},"indent":[]}},{"type":"inlineCode","value":"decodeBody","position":{"start":{"line":7,"column":58,"offset":271},"end":{"line":7,"column":70,"offset":283},"indent":[]}},{"type":"text","value":". The default implementation\nwill decode JSON to an object or return text based on the content type. If the content type is\nnot JSON or text the raw ","position":{"start":{"line":7,"column":70,"offset":283},"end":{"line":9,"column":26,"offset":432},"indent":[1,1]}},{"type":"inlineCode","value":"Response","position":{"start":{"line":9,"column":26,"offset":432},"end":{"line":9,"column":36,"offset":442},"indent":[]}},{"type":"text","value":" will be returned.","position":{"start":{"line":9,"column":36,"offset":442},"end":{"line":9,"column":54,"offset":460},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":214},"end":{"line":9,"column":54,"offset":460},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can transform the decoded body with ","position":{"start":{"line":11,"column":1,"offset":462},"end":{"line":11,"column":41,"offset":502},"indent":[]}},{"type":"inlineCode","value":"transformResponseBody","position":{"start":{"line":11,"column":41,"offset":502},"end":{"line":11,"column":64,"offset":525},"indent":[]}},{"type":"text","value":". This is useful if you need to do something\nwith the returned data. For example you could add it to a cache or create an instance of a class.","position":{"start":{"line":11,"column":64,"offset":525},"end":{"line":12,"column":98,"offset":667},"indent":[1]}}],"position":{"start":{"line":11,"column":1,"offset":462},"end":{"line":12,"column":98,"offset":667},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"// Via prepare\nconst preparedAction = action.prepare({ urlArgs: { id: '1' }});\npreparedAction.execute();\n\n// Directly\naction.execute({ urlArgs: { id: '1' }});","position":{"start":{"line":14,"column":1,"offset":669},"end":{"line":21,"column":4,"offset":837},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":24,"column":1,"offset":840},"end":{"line":24,"column":31,"offset":870},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":24,"column":31,"offset":870}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This can be called directly or indirectly via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prepare\"), \".\"), mdx(\"p\", null, \"If the fetch call itself fails (eg. a network error) a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RequestError\"), \" will be thrown.\"), mdx(\"p\", null, \"If the response is a non-2XX response an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ApiError\"), \" will be thrown.\"), mdx(\"p\", null, \"If the call is successful the body will be decoded using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decodeBody\"), \". The default implementation\\nwill decode JSON to an object or return text based on the content type. If the content type is\\nnot JSON or text the raw \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Response\"), \" will be returned.\"), mdx(\"p\", null, \"You can transform the decoded body with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transformResponseBody\"), \". This is useful if you need to do something\\nwith the returned data. For example you could add it to a cache or create an instance of a class.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Via prepare\\nconst preparedAction = action.prepare({ urlArgs: { id: '1' }});\\npreparedAction.execute();\\n\\n// Directly\\naction.execute({ urlArgs: { id: '1' }});\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This can be called directly or indirectly via `}<inlineCode parentName=\"p\">{`prepare`}</inlineCode>{`.`}</p>\n    <p>{`If the fetch call itself fails (eg. a network error) a `}<inlineCode parentName=\"p\">{`RequestError`}</inlineCode>{` will be thrown.`}</p>\n    <p>{`If the response is a non-2XX response an `}<inlineCode parentName=\"p\">{`ApiError`}</inlineCode>{` will be thrown.`}</p>\n    <p>{`If the call is successful the body will be decoded using `}<inlineCode parentName=\"p\">{`decodeBody`}</inlineCode>{`. The default implementation\nwill decode JSON to an object or return text based on the content type. If the content type is\nnot JSON or text the raw `}<inlineCode parentName=\"p\">{`Response`}</inlineCode>{` will be returned.`}</p>\n    <p>{`You can transform the decoded body with `}<inlineCode parentName=\"p\">{`transformResponseBody`}</inlineCode>{`. This is useful if you need to do something\nwith the returned data. For example you could add it to a cache or create an instance of a class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Via prepare\nconst preparedAction = action.prepare({ urlArgs: { id: '1' }});\npreparedAction.execute();\n\n// Directly\naction.execute({ urlArgs: { id: '1' }});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}