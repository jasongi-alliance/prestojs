{"expireTime":9007200833969726000,"key":"gatsby-plugin-mdx-entire-payload-d16a68d3fbc940015bd1f7fec276271a-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Currently serves the bare purpose of being a collection of Fields (ie. does not hold any data inside it)","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This should be extended and have relevant fields set on it:","position":{"start":{"line":3,"column":1,"offset":106},"end":{"line":3,"column":60,"offset":165},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":106},"end":{"line":3,"column":60,"offset":165},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"class UserFilterSet extends FilterSet {\n    static _model = User;\n\n    static _fields = {\n        userId: new IntegerField({ label: 'User ID' })\n        firstName: new CharField({ label: 'First Name' }),\n        // label is optional; will be generated as 'Last name'\n        lastName: new CharField(),\n    };\n}","position":{"start":{"line":5,"column":1,"offset":167},"end":{"line":16,"column":4,"offset":487},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":19,"column":1,"offset":490},"end":{"line":19,"column":31,"offset":520},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":31,"offset":520}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Currently serves the bare purpose of being a collection of Fields (ie. does not hold any data inside it)\"), mdx(\"p\", null, \"This should be extended and have relevant fields set on it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class UserFilterSet extends FilterSet {\\n    static _model = User;\\n\\n    static _fields = {\\n        userId: new IntegerField({ label: 'User ID' })\\n        firstName: new CharField({ label: 'First Name' }),\\n        // label is optional; will be generated as 'Last name'\\n        lastName: new CharField(),\\n    };\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Currently serves the bare purpose of being a collection of Fields (ie. does not hold any data inside it)`}</p>\n    <p>{`This should be extended and have relevant fields set on it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class UserFilterSet extends FilterSet {\n    static _model = User;\n\n    static _fields = {\n        userId: new IntegerField({ label: 'User ID' })\n        firstName: new CharField({ label: 'First Name' }),\n        // label is optional; will be generated as 'Last name'\n        lastName: new CharField(),\n    };\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}