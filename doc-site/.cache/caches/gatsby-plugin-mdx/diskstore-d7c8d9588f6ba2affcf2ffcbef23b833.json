{"expireTime":9007200833969724000,"key":"gatsby-plugin-mdx-entire-payload-112943708855cfe8d803e0d4bd3ad6cf-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { Form } from '@prestojs/final-form';\nimport { User } from 'docSite/models';","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":39,"offset":83},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Must be used within a ","position":{"start":{"line":4,"column":1,"offset":85},"end":{"line":4,"column":23,"offset":107},"indent":[]}},{"type":"inlineCode","value":"ViewModelForm","position":{"start":{"line":4,"column":23,"offset":107},"end":{"line":4,"column":38,"offset":122},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":38,"offset":122},"end":{"line":4,"column":39,"offset":123},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":85},"end":{"line":4,"column":39,"offset":123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If ","position":{"start":{"line":6,"column":1,"offset":125},"end":{"line":6,"column":4,"offset":128},"indent":[]}},{"type":"inlineCode","value":"component","position":{"start":{"line":6,"column":4,"offset":128},"end":{"line":6,"column":15,"offset":139},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":6,"column":15,"offset":139},"end":{"line":6,"column":17,"offset":141},"indent":[]}},{"type":"inlineCode","value":"render","position":{"start":{"line":6,"column":17,"offset":141},"end":{"line":6,"column":25,"offset":149},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":6,"column":25,"offset":149},"end":{"line":6,"column":29,"offset":153},"indent":[]}},{"type":"inlineCode","value":"children","position":{"start":{"line":6,"column":29,"offset":153},"end":{"line":6,"column":39,"offset":163},"indent":[]}},{"type":"text","value":" are passed they will be used instead of selecting a widget\nbased on the field type.","position":{"start":{"line":6,"column":39,"offset":163},"end":{"line":7,"column":25,"offset":247},"indent":[1]}}],"position":{"start":{"line":6,"column":1,"offset":125},"end":{"line":7,"column":25,"offset":247},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Usage:","position":{"start":{"line":9,"column":1,"offset":249},"end":{"line":9,"column":7,"offset":255},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":249},"end":{"line":9,"column":7,"offset":255},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"// Fill out label, help text, required indicator and the field widget component to use based\n// on the User email field\n<Form.Item field={User.fields.email} />\n// The equivalent thing writing out everything explicitly:\n<Form.Item\n    required={User.fields.email.required}\n    label={User.fields.email.label}\n    help={User.fields.email.help}\n>\n    <Form.Field field={User.fields.email} />\n</Form.Item>","position":{"start":{"line":11,"column":1,"offset":257},"end":{"line":23,"column":4,"offset":669},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can override any prop that is autofilled from the field:","position":{"start":{"line":25,"column":1,"offset":671},"end":{"line":25,"column":61,"offset":731},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":671},"end":{"line":25,"column":61,"offset":731},"indent":[]}},{"type":"jsx","value":"<CodeEditor scope={{ Form, User }}>{`\n<Form onSubmit={data => console.log(data)}>\n    <Form.Item field={User.fields.email} label=\"Email Address\" />\n</Form>`}\n</CodeEditor>","position":{"start":{"line":27,"column":1,"offset":733},"end":{"line":31,"column":14,"offset":904},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Or you can specify everything, including the field","position":{"start":{"line":34,"column":1,"offset":907},"end":{"line":34,"column":51,"offset":957},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":907},"end":{"line":34,"column":51,"offset":957},"indent":[]}},{"type":"code","lang":"jsx","meta":"{1-2}","value":"<Form onSubmit={data => console.log(data)}>\n    <Form.Item label=\"Email\" help=\"Please double check your email\">\n        <Form.Field field={User.fields.email} />\n    </Form.Item>\n</Form>","position":{"start":{"line":36,"column":1,"offset":959},"end":{"line":42,"column":4,"offset":1161},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"jsx","meta":"live=true","value":"<Form onSubmit={data => console.log(data)}>\n    <Form.Item label=\"Email\" help=\"Please double check your email\">\n        <Form.Field field={User.fields.email} />\n    </Form.Item>\n</Form>","position":{"start":{"line":44,"column":1,"offset":1163},"end":{"line":50,"column":4,"offset":1369},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"FormItem\",\"slug\":\"/api/@prestojs/final-form/FormItem.html\"}","position":{"start":{"line":53,"column":1,"offset":1372},"end":{"line":53,"column":98,"offset":1469},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":53,"column":98,"offset":1469}}},"scopeImports":["import { Form } from '@prestojs/final-form';","import { User } from 'docSite/models';","import React from 'react'"],"scopeIdentifiers":["Form","User","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FormItem\",\n  \"slug\": \"/api/@prestojs/final-form/FormItem.html\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CodeEditor = makeShortcode(\"CodeEditor\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Must be used within a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModelForm\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" are passed they will be used instead of selecting a widget\\nbased on the field type.\"), mdx(\"p\", null, \"Usage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Fill out label, help text, required indicator and the field widget component to use based\\n// on the User email field\\n<Form.Item field={User.fields.email} />\\n// The equivalent thing writing out everything explicitly:\\n<Form.Item\\n    required={User.fields.email.required}\\n    label={User.fields.email.label}\\n    help={User.fields.email.help}\\n>\\n    <Form.Field field={User.fields.email} />\\n</Form.Item>\\n\")), mdx(\"p\", null, \"You can override any prop that is autofilled from the field:\"), mdx(CodeEditor, {\n    scope: {\n      Form: Form,\n      User: User\n    },\n    mdxType: \"CodeEditor\"\n  }, \"\\n<Form onSubmit={data => console.log(data)}>\\n    <Form.Item field={User.fields.email} label=\\\"Email Address\\\" />\\n</Form>\"), mdx(\"p\", null, \"Or you can specify everything, including the field\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"{1-2}\",\n    \"{1-2}\": true\n  }), \"<Form onSubmit={data => console.log(data)}>\\n    <Form.Item label=\\\"Email\\\" help=\\\"Please double check your email\\\">\\n        <Form.Field field={User.fields.email} />\\n    </Form.Item>\\n</Form>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }), \"<Form onSubmit={data => console.log(data)}>\\n    <Form.Item label=\\\"Email\\\" help=\\\"Please double check your email\\\">\\n        <Form.Field field={User.fields.email} />\\n    </Form.Item>\\n</Form>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport { Form } from '@prestojs/final-form';\nimport { User } from 'docSite/models';\nexport const _frontmatter = {\n  \"title\": \"FormItem\",\n  \"slug\": \"/api/@prestojs/final-form/FormItem.html\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst CodeEditor = makeShortcode(\"CodeEditor\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`Must be used within a `}<inlineCode parentName=\"p\">{`ViewModelForm`}</inlineCode>{`.`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` are passed they will be used instead of selecting a widget\nbased on the field type.`}</p>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Fill out label, help text, required indicator and the field widget component to use based\n// on the User email field\n<Form.Item field={User.fields.email} />\n// The equivalent thing writing out everything explicitly:\n<Form.Item\n    required={User.fields.email.required}\n    label={User.fields.email.label}\n    help={User.fields.email.help}\n>\n    <Form.Field field={User.fields.email} />\n</Form.Item>\n`}</code></pre>\n    <p>{`You can override any prop that is autofilled from the field:`}</p>\n    <CodeEditor scope={{\n      Form,\n      User\n    }} mdxType=\"CodeEditor\">{`\n<Form onSubmit={data => console.log(data)}>\n    <Form.Item field={User.fields.email} label=\"Email Address\" />\n</Form>`}\n    </CodeEditor>\n    <p>{`Or you can specify everything, including the field`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"{1-2}\",\n        \"{1-2}\": true\n      }}>{`<Form onSubmit={data => console.log(data)}>\n    <Form.Item label=\"Email\" help=\"Please double check your email\">\n        <Form.Field field={User.fields.email} />\n    </Form.Item>\n</Form>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`<Form onSubmit={data => console.log(data)}>\n    <Form.Item label=\"Email\" help=\"Please double check your email\">\n        <Form.Field field={User.fields.email} />\n    </Form.Item>\n</Form>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}