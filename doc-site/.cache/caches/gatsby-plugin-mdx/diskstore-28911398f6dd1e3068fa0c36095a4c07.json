{"expireTime":9007200833969726000,"key":"gatsby-plugin-mdx-entire-payload-f4f7554d86aa5a45543e1d9674f7ed70-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Parse a value received from a form widget ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42},"indent":[]}},{"type":"inlineCode","value":"onChange","position":{"start":{"line":1,"column":43,"offset":42},"end":{"line":1,"column":53,"offset":52},"indent":[]}},{"type":"text","value":" call. eg. This could convert a localized date string\ninto a ","position":{"start":{"line":1,"column":53,"offset":52},"end":{"line":2,"column":8,"offset":113},"indent":[1]}},{"type":"inlineCode","value":"Date","position":{"start":{"line":2,"column":8,"offset":113},"end":{"line":2,"column":14,"offset":119},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":14,"offset":119},"end":{"line":2,"column":15,"offset":120},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":15,"offset":120},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":4,"column":1,"offset":122},"end":{"line":4,"column":31,"offset":152},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":31,"offset":152}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Parse a value received from a form widget \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" call. eg. This could convert a localized date string\\ninto a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Date\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Parse a value received from a form widget `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` call. eg. This could convert a localized date string\ninto a `}<inlineCode parentName=\"p\">{`Date`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}