{"expireTime":9007200833969725000,"key":"gatsby-plugin-mdx-entire-payload-7029475fcf6ebd3db9ef9d24de351f81-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"pass widgetType: 'select' | 'radio' to specify widget type\nby default, select is used when there are 4 or more choices available, otherwise radio","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":87,"offset":145},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":87,"offset":145},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"See ","position":{"start":{"line":4,"column":1,"offset":147},"end":{"line":4,"column":5,"offset":151},"indent":[]}},{"type":"link","title":null,"url":"https://next.ant.design/components/select/","children":[{"type":"text","value":"Select","position":{"start":{"line":4,"column":6,"offset":152},"end":{"line":4,"column":12,"offset":158},"indent":[]}}],"position":{"start":{"line":4,"column":5,"offset":151},"end":{"line":4,"column":57,"offset":203},"indent":[]}},{"type":"text","value":" for Select props available\nSee ","position":{"start":{"line":4,"column":57,"offset":203},"end":{"line":5,"column":5,"offset":235},"indent":[1]}},{"type":"link","title":null,"url":"https://next.ant.design/components/radio/","children":[{"type":"text","value":"Radio","position":{"start":{"line":5,"column":6,"offset":236},"end":{"line":5,"column":11,"offset":241},"indent":[]}}],"position":{"start":{"line":5,"column":5,"offset":235},"end":{"line":5,"column":55,"offset":285},"indent":[]}},{"type":"text","value":"   for Radio props available","position":{"start":{"line":5,"column":55,"offset":285},"end":{"line":5,"column":83,"offset":313},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":147},"end":{"line":5,"column":83,"offset":313},"indent":[1]}},{"type":"import","value":"import { CharChoicesWidget } from '@prestojs/ui-antd';","position":{"start":{"line":7,"column":1,"offset":315},"end":{"line":7,"column":55,"offset":369},"indent":[]}},{"type":"jsx","value":"<View\n  componentName=\"CharChoicesWidget\"\n  componentProps={{\n    choices: {\n        type: PropTypes.Array,\n        value: \"[['one', 'One'], ['two', 'Two']]\",\n        description: \"Choices as either a ES6 Map() or an array of pairs\"\n    },\n    widgetType: {\n        type: PropTypes.String,\n        value: \"\",\n        description: \"Widget type to use, one of 'select' or 'radio'.\",\n    }\n  }}\n  scope={{\n    CharChoicesWidget,\n  }}\n  imports={{\n    '@prestojs/ui-antd': {\n        named: ['CharChoicesWidget'],\n    },\n  }}\n/>\n ","position":{"start":{"line":9,"column":1,"offset":371},"end":{"line":32,"column":2,"offset":896},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"slug\":\"/api/@prestojs/ui-antd/widgets/CharChoicesWidget.html\"}","position":{"start":{"line":35,"column":1,"offset":899},"end":{"line":35,"column":93,"offset":991},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":35,"column":93,"offset":991}}},"scopeImports":["import { CharChoicesWidget } from '@prestojs/ui-antd';","import React from 'react'"],"scopeIdentifiers":["CharChoicesWidget","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/api/@prestojs/ui-antd/widgets/CharChoicesWidget.html\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar View = makeShortcode(\"View\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"pass widgetType: 'select' | 'radio' to specify widget type\\nby default, select is used when there are 4 or more choices available, otherwise radio\"), mdx(\"p\", null, \"See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://next.ant.design/components/select/\"\n  }), \"Select\"), \" for Select props available\\nSee \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://next.ant.design/components/radio/\"\n  }), \"Radio\"), \"   for Radio props available\"), mdx(View, {\n    componentName: \"CharChoicesWidget\",\n    componentProps: {\n      choices: {\n        type: PropTypes.Array,\n        value: \"[['one', 'One'], ['two', 'Two']]\",\n        description: \"Choices as either a ES6 Map() or an array of pairs\"\n      },\n      widgetType: {\n        type: PropTypes.String,\n        value: \"\",\n        description: \"Widget type to use, one of 'select' or 'radio'.\"\n      }\n    },\n    scope: {\n      CharChoicesWidget: CharChoicesWidget\n    },\n    imports: {\n      '@prestojs/ui-antd': {\n        named: ['CharChoicesWidget']\n      }\n    },\n    mdxType: \"View\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport { CharChoicesWidget } from '@prestojs/ui-antd';\nexport const _frontmatter = {\n  \"slug\": \"/api/@prestojs/ui-antd/widgets/CharChoicesWidget.html\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst View = makeShortcode(\"View\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`pass widgetType: 'select' | 'radio' to specify widget type\nby default, select is used when there are 4 or more choices available, otherwise radio`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://next.ant.design/components/select/\"\n      }}>{`Select`}</a>{` for Select props available\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"https://next.ant.design/components/radio/\"\n      }}>{`Radio`}</a>{`   for Radio props available`}</p>\n\n    <View componentName=\"CharChoicesWidget\" componentProps={{\n      choices: {\n        type: PropTypes.Array,\n        value: \"[['one', 'One'], ['two', 'Two']]\",\n        description: \"Choices as either a ES6 Map() or an array of pairs\"\n      },\n      widgetType: {\n        type: PropTypes.String,\n        value: \"\",\n        description: \"Widget type to use, one of 'select' or 'radio'.\"\n      }\n    }} scope={{\n      CharChoicesWidget\n    }} imports={{\n      '@prestojs/ui-antd': {\n        named: ['CharChoicesWidget']\n      }\n    }} mdxType=\"View\" />\n \n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}