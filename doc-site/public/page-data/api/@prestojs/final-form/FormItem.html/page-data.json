{"componentChunkName":"component---src-pages-api-js","path":"/api/@prestojs/final-form/FormItem.html","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FormItem\",\n  \"slug\": \"/api/@prestojs/final-form/FormItem.html\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CodeEditor = makeShortcode(\"CodeEditor\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Must be used within a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModelForm\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" are passed they will be used instead of selecting a widget\\nbased on the field type.\"), mdx(\"p\", null, \"Usage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Fill out label, help text, required indicator and the field widget component to use based\\n// on the User email field\\n<Form.Item field={User.fields.email} />\\n// The equivalent thing writing out everything explicitly:\\n<Form.Item\\n    required={User.fields.email.required}\\n    label={User.fields.email.label}\\n    help={User.fields.email.help}\\n>\\n    <Form.Field field={User.fields.email} />\\n</Form.Item>\\n\")), mdx(\"p\", null, \"You can override any prop that is autofilled from the field:\"), mdx(CodeEditor, {\n    scope: {\n      Form: Form,\n      User: User\n    },\n    mdxType: \"CodeEditor\"\n  }, \"\\n<Form onSubmit={data => console.log(data)}>\\n    <Form.Item field={User.fields.email} label=\\\"Email Address\\\" />\\n</Form>\"), mdx(\"p\", null, \"Or you can specify everything, including the field\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"{1-2}\",\n    \"{1-2}\": true\n  }), \"<Form onSubmit={data => console.log(data)}>\\n    <Form.Item label=\\\"Email\\\" help=\\\"Please double check your email\\\">\\n        <Form.Field field={User.fields.email} />\\n    </Form.Item>\\n</Form>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }), \"<Form onSubmit={data => console.log(data)}>\\n    <Form.Item label=\\\"Email\\\" help=\\\"Please double check your email\\\">\\n        <Form.Field field={User.fields.email} />\\n    </Form.Item>\\n</Form>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"typeDocsJson":{"kindString":"Function","name":"FormItem","id":"1849","comment":null,"groups":null,"slug":"/api/@prestojs/final-form/FormItem.html","packageName":"final-form","signatures":[{"name":"FormItem","comment":{"shortText":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Wrapper around Field from react-final-form that determines the widget to use based on the field.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"text":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Must be used within a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModelForm\"), \".\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" are passed they will be used instead of selecting a widget\\nbased on the field type.\"), mdx(\"p\", null, \"Usage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Fill out label, help text, required indicator and the field widget component to use based\\n// on the User email field\\n<Form.Item field={User.fields.email} />\\n// The equivalent thing writing out everything explicitly:\\n<Form.Item\\n    required={User.fields.email.required}\\n    label={User.fields.email.label}\\n    help={User.fields.email.help}\\n>\\n    <Form.Field field={User.fields.email} />\\n</Form.Item>\\n\")), mdx(\"p\", null, \"You can override any prop that is autofilled from the field:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Form.Item field={User.fields.email} label=\\\"Email Address\\\" />\\n\")), mdx(\"p\", null, \"Or you can specify everything, including the field\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Form.Item label=\\\"Email\\\" help=\\\"Please double check your email\\\">\\n    <Form.Field field={User.fields.email} />\\n</Form.Item>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}}],"childNodes":null}},"pageContext":{"id":"1849","slug":"/api/@prestojs/final-form/FormItem.html"}}}