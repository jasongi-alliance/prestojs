{"componentChunkName":"component---src-pages-api-js","path":"/api/@prestojs/viewmodel/FilterSet.html","result":{"data":{"mdx":null,"typeDocsJson":{"kindString":"Class","name":"FilterSet","id":"379","comment":{"shortText":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Base Filterset class for filters to be applied to models. Shares commonality with ViewModels in sense that FilterSets\\nare also field based. Filter fields are usually part of backend model fields, but some of them might be calculated and\\nothers not necessary exposed to frontend ViewModel, so it'll be independent of a given ViewModel.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"text":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Currently serves the bare purpose of being a collection of Fields (ie. does not hold any data inside it)\"), mdx(\"p\", null, \"This should be extended and have relevant fields set on it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class UserFilterSet extends FilterSet {\\n    static _model = User;\\n\\n    static _fields = {\\n        userId: new IntegerField({ label: 'User ID' })\\n        firstName: new CharField({ label: 'First Name' }),\\n        // label is optional; will be generated as 'Last name'\\n        lastName: new CharField(),\\n    };\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"groups":[{"title":"Constructors","children":[382]},{"title":"Properties","children":[387,386]},{"title":"Accessors","children":[394,392]},{"title":"Methods","children":[388,384]}],"slug":"/api/@prestojs/viewmodel/FilterSet.html","packageName":"viewmodel","signatures":null,"childNodes":[{"id":382,"flags":{"isPrivate":null},"signatures":[{"name":"new FilterSet","comment":null,"parameters":null,"inheritedFrom":null}]},{"id":387,"flags":{"isPrivate":null},"signatures":null},{"id":386,"flags":{"isPrivate":null},"signatures":null},{"id":394,"flags":{"isPrivate":null},"signatures":null},{"id":392,"flags":{"isPrivate":null},"signatures":null},{"id":388,"flags":{"isPrivate":null},"signatures":[{"name":"bindFields","comment":null,"parameters":[{"id":390,"name":"fields","comment":null},{"id":391,"name":"bindTo","comment":null}],"inheritedFrom":{"name":"FieldBinder.bindFields"}}]},{"id":384,"flags":{"isPrivate":null},"signatures":[{"name":"toString","comment":null,"parameters":null,"inheritedFrom":null}]}]}},"pageContext":{"id":"379","slug":"/api/@prestojs/viewmodel/FilterSet.html"}}}