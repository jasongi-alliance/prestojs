{"version":3,"sources":["webpack:///./src/pages/Api.js"],"names":["menuItems","Object","entries","apiMenu","map","title","children","CommentBlock","comment","shortText","body","text","Signature","signature","parameters","filter","p","name","param","join","length","MethodWrapper","styled","div","MethodDoc","method","signatures","sig","kindComponents","Function","doc","Class","groups","reduce","acc","group","childNodes","child","id","constructor","Constructors","methods","Methods","flags","isPrivate","direct","inherited","inheritedFrom","push","Variable","ImportString","code","ArticleWrapper","Article","pageQuery","Api","props","data","typeDocsJson","mdx","DocComponent","kindString","items","packageName"],"mappings":"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","file":"component---src-pages-api-js-a9f455432f3feb2fb4ad.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport styled from 'styled-components';\nimport Article from '../components/Article';\nimport Menu from '../components/Menu';\nimport Sidebar from '../components/Sidebar';\nimport Layout from '../components/Layout';\nimport apiMenu from '../../data/apiMenu';\n\nconst menuItems = Object.entries(apiMenu).map(([name, children]) => ({\n    title: name,\n    children,\n}));\n\nfunction CommentBlock({ comment }) {\n    if (!comment) {\n        return null;\n    }\n    return (\n        <>\n            {comment.shortText && <MDXRenderer>{comment.shortText.body}</MDXRenderer>}\n            {comment.text && <MDXRenderer>{comment.text.body}</MDXRenderer>}\n        </>\n    );\n}\n\nfunction Signature({ signature }) {\n    const parameters = (signature.parameters && signature.parameters.filter(p => p.comment)) || [];\n    return (\n        <>\n            <h4>\n                {signature.name}(\n                {signature.parameters && signature.parameters.map(param => param.name).join(', ')})\n            </h4>\n            <br />\n            <CommentBlock comment={signature.comment} />\n            {parameters.length > 0 && (\n                <dl>\n                    {parameters.map(param => (\n                        <>\n                            <dt>{param.name}</dt>\n                            <dd>\n                                <CommentBlock comment={param.comment} />\n                            </dd>\n                        </>\n                    ))}\n                </dl>\n            )}\n        </>\n    );\n}\n\nconst MethodWrapper = styled.div`\n    border-bottom: 1px solid #ececec;\n    > h4 {\n        font-size: 2em;\n        margin: 0;\n    }\n    padding: 10px 0;\n    margin-bottom: 10px;\n`;\n\nfunction MethodDoc({ method }) {\n    return (\n        <MethodWrapper>\n            {method.signatures.map(sig => (\n                <Signature signature={sig} />\n            ))}\n        </MethodWrapper>\n    );\n}\n\nfunction ClassDoc({ doc }) {\n    const groups = doc.groups.reduce((acc, group) => {\n        acc[group.title] = group;\n        return acc;\n    }, {});\n    const children = doc.childNodes.reduce((acc, child) => {\n        acc[child.id] = child;\n        return acc;\n    }, {});\n    const constructor = groups.Constructors && children[groups.Constructors.children[0]];\n    const methods =\n        (groups.Methods &&\n            groups.Methods.children\n                .map(id => children[id])\n                .filter(method => !method.flags.isPrivate)) ||\n        [];\n    const direct = [];\n    const inherited = [];\n    for (const method of methods) {\n        if (method.signatures[0].inheritedFrom) {\n            inherited.push(method);\n        } else {\n            direct.push(method);\n        }\n    }\n\n    return (\n        <>\n            <CommentBlock comment={doc.comment} />\n            {constructor && (\n                <>\n                    <h3>Constructor</h3>\n                    {constructor.signatures[0].parameters &&\n                        constructor.signatures[0].parameters\n                            .filter(p => p.comment)\n                            .map(p => (\n                                <p>\n                                    <strong>{p.name}</strong> <CommentBlock comment={p.comment} />\n                                </p>\n                            ))}\n                    {methods.length > 0 && (\n                        <>\n                            <h3>Methods</h3>\n                            {direct.map(method => (\n                                <MethodDoc method={method} />\n                            ))}\n                            {inherited.length > 0 && (\n                                <>\n                                    <h3>Inherited Methods</h3>\n                                    {inherited.map(method => (\n                                        <MethodDoc method={method} />\n                                    ))}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n}\n\nfunction FunctionDoc({ doc }) {\n    return (\n        <>\n            {doc.signatures.map(sig => (\n                <CommentBlock comment={sig.comment} />\n            ))}\n        </>\n    );\n}\n\nfunction VariableDoc({ doc }) {\n    return <CommentBlock comment={doc.comment} />;\n}\n\nconst kindComponents = {\n    Function: FunctionDoc,\n    Class: ClassDoc,\n    Variable: VariableDoc,\n};\n\nconst ImportString = styled.code`\n    padding: 5px;\n    margin-bottom: 10px;\n    display: block;\n`;\n\nconst ArticleWrapper = styled(Article)`\n    h3 {\n        font-size: 2.5em;\n    }\n`;\n\nconst Api = props => {\n    const {\n        // if mdx is set that's considered an override (ie. there exists a file in data/ with same slug as this)\n        data: { typeDocsJson: doc, mdx },\n    } = props;\n    const DocComponent = kindComponents[doc.kindString];\n    return (\n        <Layout>\n            <Sidebar>\n                <Menu items={menuItems} />\n            </Sidebar>\n            <ArticleWrapper>\n                <h1>{doc.name}</h1>\n                <ImportString>\n                    {`import { ${doc.name} } from \"@prestojs/${doc.packageName}\";`}\n                </ImportString>\n                {mdx ? <MDXRenderer>{mdx.body}</MDXRenderer> : <DocComponent doc={doc} />}\n            </ArticleWrapper>\n        </Layout>\n    );\n};\n\nexport const pageQuery = graphql`\n    query APIDocs($slug: String) {\n        mdx(frontmatter: { slug: { eq: $slug } }) {\n            body\n        }\n        typeDocsJson(slug: { eq: $slug }) {\n            kindString\n            name\n            id\n            comment {\n                shortText {\n                    body\n                }\n                text {\n                    body\n                }\n            }\n            groups {\n                title\n                children\n            }\n            slug\n            packageName\n            signatures {\n                name\n                comment {\n                    shortText {\n                        body\n                    }\n                    text {\n                        body\n                    }\n                }\n            }\n            childNodes {\n                id\n                flags {\n                    isPrivate\n                }\n                signatures {\n                    name\n                    comment {\n                        shortText {\n                            body\n                        }\n                        text {\n                            body\n                        }\n                    }\n                    parameters {\n                        id\n                        name\n                        comment {\n                            shortText {\n                                body\n                            }\n                            text {\n                                body\n                            }\n                        }\n                    }\n                    inheritedFrom {\n                        name\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport default Api;\n"],"sourceRoot":""}